name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist coverage[toml]

      - name: Lint with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run: |
          pip install mypy types-requests
          mypy --install-types --non-interactive --ignore-missing-imports . || true

      - name: Run tests with pytest
        run: |
          python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=85

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage badge
        if: matrix.python-version == '3.12' && github.ref == 'refs/heads/main'
        run: |
          pip install coverage-badge
          coverage-badge -o coverage.svg

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            coverage.svg
            .coverage

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run security scan with bandit
        run: |
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true

      - name: Run dependency vulnerability scan
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed --icon=icon.ico --name="RFID-Agent" main.py

      - name: Build executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile --name="rfid-agent" main.py

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: |
            dist/*

  release:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from commit ${{ github.sha }}

            ## What's Changed
            - Automated build and test pipeline
            - Cross-platform executables
            - Security scans passed

            ## Test Coverage
            Check the artifacts for detailed coverage reports.
          draft: false
          prerelease: false

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build]
    if: always()

    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ All CI/CD pipeline steps completed successfully!"
          echo "Tests passed, security scans clean, builds successful."

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Test result: ${{ needs.test.result }}"
          echo "Security scan result: ${{ needs.security-scan.result }}"
          echo "Build result: ${{ needs.build.result }}"
          exit 1
