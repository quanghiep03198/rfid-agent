name: Create Release

on:
  push:
    tags:
      - "v*.*.*" # Automatically trigger on version tags
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.2.3) - leave empty to use latest tag"
        required: false
        type: string
      prerelease:
        description: "Is this a pre-release?"
        required: false
        type: boolean
        default: false
      use_latest_tag:
        description: "Use latest tag for release (ignores version input)"
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable using build script
        run: |
          scripts\build.bat

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executable-windows
          path: |
            dist/

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            # Automatic trigger from tag push
            TAG_NAME="${{ github.ref_name }}"
            VERSION=${TAG_NAME#v}
            echo "Automatic trigger from tag push: $TAG_NAME"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.use_latest_tag }}" = "true" ] || [ -z "${{ inputs.version }}" ]; then
            # Use latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LATEST_TAG" ]; then
              echo "❌ No tags found in repository!"
              exit 1
            fi
            # Remove 'v' prefix if present
            VERSION=${LATEST_TAG#v}
            echo "Using latest tag: $LATEST_TAG"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            # Use manual input
            if [ -z "${{ inputs.version }}" ]; then
              echo "❌ Version input is required when use_latest_tag is false"
              exit 1
            fi
            # Validate version format
            if ! echo "${{ inputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
              echo "❌ Invalid version format. Please use semantic versioning (e.g., 1.2.3 or 1.2.3-beta)"
              exit 1
            fi
            VERSION="${{ inputs.version }}"
            TAG_NAME="v$VERSION"
            echo "Using manual version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Check if release already exists
        run: |
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          # Check if release already exists
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "❌ Release $TAG_NAME already exists!"
            echo "🔗 View existing release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/$TAG_NAME"
            exit 1
          fi
          echo "✅ Release $TAG_NAME does not exist, proceeding..."
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Archive RFID Agent folder
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Check if the RFID Agent folder exists in the downloaded artifacts
          if [ -d "executable-windows/RFID Agent" ]; then
            echo "Found RFID Agent folder, creating ZIP archive..."
            cd "executable-windows"
            # Create ZIP archive for Windows compatibility
            zip -r "../RFID-Agent-v${VERSION}-portable.zip" "RFID Agent"
            cd ..
            echo "Archive created: RFID-Agent-v${VERSION}-portable.zip"
            ls -la *.zip
          else
            echo "RFID Agent folder not found in artifacts"
            echo "Available files in executable-windows:"
            ls -la executable-windows/ || echo "executable-windows directory not found"
          fi

      - name: Prepare installation assets
        run: |
          # Create a directory for release assets
          mkdir -p release-assets

          # Copy installation files if they exist
          if [ -d "installation" ]; then
            echo "Found installation folder, copying files..."
            cp -r installation/* release-assets/ 2>/dev/null || true
            ls -la release-assets/
          else
            echo "No installation folder found"
          fi

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG_NAME="${{ steps.version.outputs.tag_name }}"

          # Get commits since last tag
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            # For automatic tag triggers, get commits since previous tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${TAG_NAME}^" 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              COMMITS=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..${TAG_NAME})
            else
              COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10 ${TAG_NAME})
            fi
          elif [ "${{ inputs.use_latest_tag }}" = "true" ] || [ -z "${{ inputs.version }}" ]; then
            # When using latest tag, get commits since the previous tag
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${TAG_NAME}^" 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              COMMITS=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..${TAG_NAME})
            else
              COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10 ${TAG_NAME})
            fi
          else
            # When using manual version, get commits since last existing tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              COMMITS=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
            else
              COMMITS=$(git log --pretty=format:"- %s (%h)" -10)
            fi
          fi

          # Save changelog to file
          cat > changelog.md << EOF
          ## Changes in v${VERSION}

          ${COMMITS}

          ## Downloads
          - **Windows Portable**: RFID-Agent-v${VERSION}-portable.zip (Complete application folder)
          - **Windows Installer**: Available in installation assets (if included)

          ## Installation

          ### Option 1: Portable Version (Recommended)
          1. Download \`RFID-Agent-v${VERSION}-portable.zip\`
          2. Extract the ZIP file to your desired location
          3. Run \`RFID Agent.exe\` from the extracted folder

          ### Option 2: Use Installer (if available)
          Download and run the installer from the release assets.

          ## System Requirements
          - Windows 10, 11 or later
          - No additional dependencies required
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ inputs.prerelease }}
          files: |
            executable-windows/*
            release-assets/*
            RFID-Agent-v${{ steps.version.outputs.version }}-portable.zip
          make_latest: ${{ !inputs.prerelease }}

      - name: Success notification
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG_NAME="${{ steps.version.outputs.tag_name }}"
          echo "✅ Release v${VERSION} created successfully!"
          echo "🔗 Check it out at: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${TAG_NAME}"
